<Project>
    <PropertyGroup>
        <!-- Sets the target framework for the project to .NET 8.0 -->
        <TargetFramework>net9.0</TargetFramework>

        <!-- Sets the C# language version to the latest major version -->
        <LangVersion>latestmajor</LangVersion>

        <!-- Enables .NET analyzers which provide code quality analysis -->
        <EnableNETAnalyzers>true</EnableNETAnalyzers>

        <!-- Sets the analysis level to the latest to use the most up-to-date rules and improvements -->
        <AnalysisLevel>latest</AnalysisLevel>

        <!-- Enables nullable reference types to avoid null reference errors -->
        <Nullable>enable</Nullable>

        <!-- Treats all warnings related to nullable reference types as errors -->
        <WarningsAsErrors>Nullable</WarningsAsErrors>

        <!-- Enforces code style rules during the build process -->
        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>

        <!-- Treats all warnings as errors to ensure code is warning-free -->
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

        <!-- Accelerates the build process in Visual Studio -->
        <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>

        <!-- Generates an XML documentation file for the code, which is imporant for libaries api's and more -->
        <GenerateDocumentationFile>true</GenerateDocumentationFile>

        <!--We are currently do not activate this feature:
        - Most pain is our legacy code, and still using lots of nuget packages, which cause sometimes ambiguous references.
        - Automatically included namespaces can sometimes lead to name conflicts, requiring explicit disambiguation using fully qualified names.Performance Impact:
        - Though typically minimal, there could be a slight performance overhead during compilation due to the inclusion of additional namespaces.Loss of Control:
        - Developers have less control over which namespaces are included, which can lead to unnecessary inclusions that might not be used in certain files.Code Portability:
        - Code relying on implicit usings might face issues when moved to projects or environments where implicit usings are not enabled, requiring manual addition of missing namespaces.-->
        <ImplicitUsings>disable</ImplicitUsings>
    </PropertyGroup>
</Project>