using System;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Siemens.AspNet.ErrorHandling.Contracts;

namespace $projectName$
{
    public static class AddHttpCallHandlerFactoryExtension
    {
        public static void AddHttpCallHandlerFactory(this IServiceCollection services)
        {
            services.AddResponseTypeHandleStrategy();
            services.AddHttpRequestMessageBuilder();
            services.AddRequestPrinter();

            services.AddSingletonIfNotExists<HttpCallHandlerFactory>();
        }
    }

    internal sealed class HttpCallHandlerFactory(ResponseTypeHandleStrategy responseTypeHandleStrategy,
                                          HttpRequestMessageBuilder httpRequestMessageBuilder,
                                          IRequestPrinter requestPrinter)
    {
        internal HttpCallHandler CreateFrom(HttpClient client)
        {
            return new HttpCallHandler(client, responseTypeHandleStrategy, httpRequestMessageBuilder, requestPrinter);
        }
    }
}
