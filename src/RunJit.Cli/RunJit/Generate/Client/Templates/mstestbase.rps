using AspNetCore.Simple.MsTest.Sdk;
using Extensions.Pack;
using Microsoft.AspNetCore.Mvc.Testing;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace $namespace$
{
    [TestClass]
    public abstract class ApiTestBase
    {
        private static ApiTestBase<Startup>? _customWebApplicationFactory;
        private static HttpClient? _httpClient;
      
        // In this sample we currently use assembly initialize, to save performance, but you can do it also different.
        [AssemblyInitialize]
        public static Task AssemblyInitializeAsync(TestContext _)
        {
            // 1. Super simple just use the provided API test base class and you are ready to go
            var environmentVariables = EmbeddedFile.GetFileContentFrom("Properties.EnvironmentVariables.json")
                                                   .FromJsonStringAs<Dictionary<string, string>>()
                                                   .Select(keyValue => (keyValue.Key, keyValue.Value)).ToArray();

            // Create this with new, is not a fault, the reason is to keep the test class more cleaner.
            _customWebApplicationFactory = new ApiTestBase<Startup>("Development", (services, config) =>
            {                
                services.Add$clientName$(config);
                services.Add$clientName$Factory(config);
            },
            environmentVariables);
    
    
            var serviceProvider = _customWebApplicationFactory.Services;
             
            _httpClient = _customWebApplicationFactory.CreateClient(new WebApplicationFactoryClientOptions { AllowAutoRedirect = false });
    
            // Add your client authentication here !
    
            var $clientName$Factory = serviceProvider.GetOrThrowMissingException<I$clientName$Factory>();
            $clientName$ = $clientName$Factory.CreateFrom(_httpClient);

            return Task.CompletedTask;
        }
    	      
        protected static $clientName$ $clientName$ { get; private set; } = null!;
    
        [AssemblyCleanup]
        public static void AssemblyCleanup()
        {
            _customWebApplicationFactory?.Dispose();
            _httpClient?.Dispose();
        }  
    }
}