using System;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using Extensions.Pack;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
$usings$

namespace $projectName$
{
    public static class Add$clientName$FactoryExtension
    {
        public static void Add$clientName$Factory(this IServiceCollection services, IConfiguration configuration)
        {
            services.AddHttpClient();
            services.Add$clientName$Settings(configuration);
            services.AddResponseTypeHandleStrategy();
            services.AddJsonSerializer(configuration);

            services.AddSingletonIfNotExists<I$clientName$Factory, $clientName$Factory>();
        }
    }

    public interface I$clientName$Factory
    {
        $clientName$ CreateFrom(HttpClient sourceClient);
        $clientName$ CreateFrom(HttpRequest httpRequest);
    }

    internal class $clientName$Factory : I$clientName$Factory
    {
        private readonly IHttpClientFactory _httpClientFactory;
        private readonly $clientName$Settings _$clientNameLower$Settings;
        private readonly HttpCallHandlerFactory _httpCallHandlerFactory;
        private readonly string[] _allowedHeadersToCopy = new[] {"User-Agent", "Authorization", "x-", "Referer"};

        public $clientName$Factory(IHttpClientFactory httpClientFactory,
                                   $clientName$Settings $clientNameLower$Settings,
                                   HttpCallHandlerFactory httpCallHandlerFactory)
        {
            _httpClientFactory = httpClientFactory;
            _$clientNameLower$Settings = $clientNameLower$Settings;
            _httpCallHandlerFactory = httpCallHandlerFactory;
        }

        public $clientName$ CreateFrom(string token)
        {
            var httpClient = _httpClientFactory.CreateClient();
            httpClient.DefaultRequestHeaders.Add("User-Agent", "$projectName$");

            httpClient.BaseAddress = new Uri(_$clientNameLower$Settings.BaseAddress);
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var httpClientHandler = _httpCallHandlerFactory.CreateFrom(httpClient);

            var client = BuildClient(httpClientHandler);

            return client;
        }

        public $clientName$ CreateFrom(HttpClient httpClient)
        {
            // For possibility to fake or moq the client here. Important for current core lambda tests
            if (httpClient.BaseAddress.IsNull() || httpClient.BaseAddress.AbsoluteUri.IsNullOrWhiteSpace())
            {
                httpClient.BaseAddress = new Uri(_$clientNameLower$Settings.BaseAddress);
            }

            // pulse specific headers needed
            if (httpClient.DefaultRequestHeaders.Contains("User-Agent").IsFalse())
            {
                httpClient.DefaultRequestHeaders.Add("User-Agent", "$projectName$");
            }

            var httpClientHandler = _httpCallHandlerFactory.CreateFrom(httpClient);

            var client = BuildClient(httpClientHandler);

            return client;
        }

        public $clientName$ CreateFrom(HttpRequest httpRequest)
        {
            var httpClient = _httpClientFactory.CreateClient();

            httpRequest.Headers.ForEach(headerEntry =>
            {
                // Important not content and host header copy
                if (_allowedHeadersToCopy.Any(allowedHeader => headerEntry.Key.Contains(allowedHeader, StringComparison.OrdinalIgnoreCase)))
                {
                    if (httpClient.DefaultRequestHeaders.Contains(headerEntry.Key).IsFalse())
                    {
                        httpClient.DefaultRequestHeaders.Add(headerEntry.Key, headerEntry.Value.FirstOrDefault() ?? string.Empty);
                    }
                }
            });

            // For possibility to fake or moq the client here. Important for current core lambda tests
            if (httpClient.BaseAddress.IsNull() ||
                httpClient.BaseAddress.AbsoluteUri.IsNullOrWhiteSpace())
            {
                httpClient.BaseAddress = new Uri(_$clientNameLower$Settings.BaseAddress);
            }

            if (httpClient.DefaultRequestHeaders.Contains("User-Agent").IsFalse())
            {
                httpClient.DefaultRequestHeaders.Add("User-Agent", "$projectName$");
            }

            var httpClientHandler = _httpCallHandlerFactory.CreateFrom(httpClient);

            var client = BuildClient(httpClientHandler);

            return client;
        }

        private $clientName$ BuildClient(HttpCallHandler httpClientHandler)
        {
            return new $clientName$($dependencies$);
        }
    }

    public static class Add$clientName$SettingsExtension
    {
        public static void Add$clientName$Settings(this IServiceCollection services, IConfiguration configuration)
        {          
            if (configuration.TryGetSettings<$clientName$Settings>(out var clientSettings).IsFalse())
            {
                clientSettings = new $clientName$Settings();
            }

            if (configuration.TryGetSettings<Tenant>(out var tenantSettings))
            {
                clientSettings = clientSettings with { BaseAddress = clientSettings.BaseAddress.Replace("{tenant}", tenantSettings.Name) };
            }
            
            services.AddSingletonIfNotExists(clientSettings);
        }
    }

    public record $clientName$Settings
    {
        public string BaseAddress { get; init; } = "http://localhost:6001/";

        public bool PrintCurl { get; init; }
    }

    internal record Tenant()
    {
        public string Name { get; init; } = "staging";
    }
}